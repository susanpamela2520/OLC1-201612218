
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import arbol.instruccion;
import arbol.Operacion;
import arbol.Variable;
import arbol.Declaracion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\007\011\000\002\007\011\000\002\007\011\000\002\007" +
    "\011\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\004\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\003\000\002\006\003\000\002" +
    "\005\007\000\002\010\005\000\002\010\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\004\000\002\012\003\000\002\013\011\000\002\013" +
    "\010\000\002\013\010\000\002\013\007\000\002\014\007" +
    "\000\002\014\006\000\002\015\004\000\002\016\012\000" +
    "\002\017\003\000\002\017\003\000\002\021\003\000\002" +
    "\020\010\000\002\020\007\000\002\022\015\000\002\022" +
    "\014\000\002\022\014\000\002\022\013\000\002\023\005" +
    "\000\002\024\007\000\002\024\006\000\002\025\006\000" +
    "\002\025\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\041\004\001\002\000\022\004\026\043" +
    "\021\045\027\052\025\055\015\063\012\065\017\067\023" +
    "\001\002\000\004\002\006\001\002\000\004\002\001\001" +
    "\002\000\024\004\026\042\237\043\021\045\027\052\025" +
    "\055\015\063\012\065\017\067\023\001\002\000\044\004" +
    "\ufff8\042\ufff8\043\ufff8\045\ufff8\047\ufff8\050\ufff8\051\ufff8" +
    "\052\ufff8\054\ufff8\055\ufff8\057\ufff8\063\ufff8\064\ufff8\065" +
    "\ufff8\066\ufff8\067\ufff8\107\ufff8\001\002\000\006\021\233" +
    "\104\154\001\002\000\020\006\036\007\041\021\034\026" +
    "\035\040\040\100\032\101\037\001\002\000\044\004\ufffa" +
    "\042\ufffa\043\ufffa\045\ufffa\047\ufffa\050\ufffa\051\ufffa\052" +
    "\ufffa\054\ufffa\055\ufffa\057\ufffa\063\ufffa\064\ufffa\065\ufffa" +
    "\066\ufffa\067\ufffa\107\ufffa\001\002\000\044\004\ufffb\042" +
    "\ufffb\043\ufffb\045\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\054\ufffb\055\ufffb\057\ufffb\063\ufffb\064\ufffb\065\ufffb\066" +
    "\ufffb\067\ufffb\107\ufffb\001\002\000\004\004\124\001\002" +
    "\000\044\004\ufffe\042\ufffe\043\ufffe\045\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\052\ufffe\054\ufffe\055\ufffe\057\ufffe\063\ufffe" +
    "\064\ufffe\065\ufffe\066\ufffe\067\ufffe\107\ufffe\001\002\000" +
    "\024\004\026\043\021\045\027\052\025\055\015\063\012" +
    "\065\017\066\200\067\023\001\002\000\044\004\ufffc\042" +
    "\ufffc\043\ufffc\045\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc" +
    "\054\ufffc\055\ufffc\057\ufffc\063\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\067\ufffc\107\ufffc\001\002\000\004\004\026\001\002" +
    "\000\044\004\ufffd\042\ufffd\043\ufffd\045\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\054\ufffd\055\ufffd\057\ufffd\063\ufffd" +
    "\064\ufffd\065\ufffd\066\ufffd\067\ufffd\107\ufffd\001\002\000" +
    "\024\005\146\006\036\007\041\013\144\021\034\026\035" +
    "\040\040\100\032\101\037\001\002\000\044\004\ufff6\042" +
    "\ufff6\043\ufff6\045\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6" +
    "\054\ufff6\055\ufff6\057\ufff6\063\ufff6\064\ufff6\065\ufff6\066" +
    "\ufff6\067\ufff6\107\ufff6\001\002\000\014\004\124\006\036" +
    "\007\041\021\034\026\035\001\002\000\010\021\uffe6\061" +
    "\uffe6\104\uffe6\001\002\000\020\006\036\007\041\021\034" +
    "\026\035\040\040\100\032\101\037\001\002\000\044\004" +
    "\ufff9\042\ufff9\043\ufff9\045\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\052\ufff9\054\ufff9\055\ufff9\057\ufff9\063\ufff9\064\ufff9\065" +
    "\ufff9\066\ufff9\067\ufff9\107\ufff9\001\002\000\044\004\ufff7" +
    "\042\ufff7\043\ufff7\045\ufff7\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\054\ufff7\055\ufff7\057\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\067\ufff7\107\ufff7\001\002\000\056\004\uffe5\036" +
    "\uffe5\037\uffe5\042\uffe5\043\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\057" +
    "\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\106\uffe5" +
    "\107\uffe5\001\002\000\010\036\073\037\072\046\101\001" +
    "\002\000\012\006\036\007\041\021\034\026\035\001\002" +
    "\000\012\006\036\007\041\021\034\026\035\001\002\000" +
    "\114\004\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\042\uffea\043\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\056\uffea\057\uffea\060\uffea\063\uffea\064\uffea\065\uffea" +
    "\066\uffea\067\uffea\106\uffea\107\uffea\110\uffea\001\002\000" +
    "\056\004\uffe4\036\uffe4\037\uffe4\042\uffe4\043\uffe4\045\uffe4" +
    "\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\057\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4" +
    "\067\uffe4\106\uffe4\107\uffe4\001\002\000\020\006\036\007" +
    "\041\021\034\026\035\040\040\100\032\101\037\001\002" +
    "\000\114\004\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\042\uffe9\043\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\055\uffe9\056\uffe9\057\uffe9\060\uffe9\063\uffe9\064\uffe9\065" +
    "\uffe9\066\uffe9\067\uffe9\106\uffe9\107\uffe9\110\uffe9\001\002" +
    "\000\030\020\052\021\044\022\053\023\046\024\054\030" +
    "\055\031\051\032\047\033\045\034\043\035\050\001\002" +
    "\000\012\006\036\007\041\021\034\026\035\001\002\000" +
    "\012\006\036\007\041\021\034\026\035\001\002\000\012" +
    "\006\036\007\041\021\034\026\035\001\002\000\012\006" +
    "\036\007\041\021\034\026\035\001\002\000\012\006\036" +
    "\007\041\021\034\026\035\001\002\000\012\006\036\007" +
    "\041\021\034\026\035\001\002\000\012\006\036\007\041" +
    "\021\034\026\035\001\002\000\012\006\036\007\041\021" +
    "\034\026\035\001\002\000\012\006\036\007\041\021\034" +
    "\026\035\001\002\000\012\006\036\007\041\021\034\026" +
    "\035\001\002\000\012\006\036\007\041\021\034\026\035" +
    "\001\002\000\070\004\uffe3\020\052\021\044\022\053\023" +
    "\046\024\054\036\uffe3\037\uffe3\042\uffe3\043\uffe3\045\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\057\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3" +
    "\067\uffe3\106\uffe3\107\uffe3\001\002\000\114\004\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\027\uffec\030\uffec" +
    "\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037" +
    "\uffec\042\uffec\043\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec" +
    "\106\uffec\107\uffec\110\uffec\001\002\000\114\004\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\054\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\042\uffef\043\uffef\045\uffef\046\uffef\047\uffef\050\uffef" +
    "\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057" +
    "\uffef\060\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef" +
    "\106\uffef\107\uffef\110\uffef\001\002\000\114\004\ufff1\020" +
    "\ufff1\021\ufff1\022\053\023\046\024\054\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\042\ufff1\043\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1" +
    "\106\ufff1\107\ufff1\110\ufff1\001\002\000\070\004\uffe2\020" +
    "\052\021\044\022\053\023\046\024\054\036\uffe2\037\uffe2" +
    "\042\uffe2\043\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\057\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\066\uffe2\067\uffe2\106\uffe2\107\uffe2\001" +
    "\002\000\070\004\uffde\020\052\021\044\022\053\023\046" +
    "\024\054\036\uffde\037\uffde\042\uffde\043\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde" +
    "\055\uffde\057\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\106\uffde\107\uffde\001\002\000\070\004\uffe1\020\052" +
    "\021\044\022\053\023\046\024\054\036\uffe1\037\uffe1\042" +
    "\uffe1\043\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\055\uffe1\057\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\066\uffe1\067\uffe1\106\uffe1\107\uffe1\001\002" +
    "\000\114\004\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024" +
    "\054\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\042\uffed\043\uffed\045\uffed\046" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\056\uffed\057\uffed\060\uffed\063\uffed\064\uffed\065" +
    "\uffed\066\uffed\067\uffed\106\uffed\107\uffed\110\uffed\001\002" +
    "\000\070\004\uffe0\020\052\021\044\022\053\023\046\024" +
    "\054\036\uffe0\037\uffe0\042\uffe0\043\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055" +
    "\uffe0\057\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0" +
    "\106\uffe0\107\uffe0\001\002\000\114\004\ufff0\020\ufff0\021" +
    "\ufff0\022\053\023\046\024\054\027\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\042" +
    "\ufff0\043\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060" +
    "\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\106\ufff0" +
    "\107\ufff0\110\ufff0\001\002\000\070\004\uffdf\020\052\021" +
    "\044\022\053\023\046\024\054\036\uffdf\037\uffdf\042\uffdf" +
    "\043\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\053\uffdf\054\uffdf\055\uffdf\057\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\106\uffdf\107\uffdf\001\002\000" +
    "\056\004\uffdb\036\073\037\072\042\uffdb\043\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\057\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb" +
    "\067\uffdb\106\uffdb\107\uffdb\001\002\000\020\006\036\007" +
    "\041\021\034\026\035\040\040\100\032\101\037\001\002" +
    "\000\020\006\036\007\041\021\034\026\035\040\040\100" +
    "\032\101\037\001\002\000\056\004\uffdd\036\uffdd\037\uffdd" +
    "\042\uffdd\043\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051" +
    "\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\057\uffdd\063\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\067\uffdd\106\uffdd\107\uffdd\001" +
    "\002\000\056\004\uffdc\036\uffdc\037\uffdc\042\uffdc\043\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\057\uffdc\063\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\067\uffdc\106\uffdc\107\uffdc\001\002\000\016\020" +
    "\052\021\044\022\053\023\046\024\054\027\077\001\002" +
    "\000\114\004\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\042\uffeb\043\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\060\uffeb\063\uffeb\064\uffeb\065" +
    "\uffeb\066\uffeb\067\uffeb\106\uffeb\107\uffeb\110\uffeb\001\002" +
    "\000\114\004\uffee\020\uffee\021\uffee\022\053\023\046\024" +
    "\054\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\042\uffee\043\uffee\045\uffee\046" +
    "\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee" +
    "\055\uffee\056\uffee\057\uffee\060\uffee\063\uffee\064\uffee\065" +
    "\uffee\066\uffee\067\uffee\106\uffee\107\uffee\110\uffee\001\002" +
    "\000\022\004\026\043\021\045\027\052\025\055\015\063" +
    "\012\065\017\067\023\001\002\000\030\004\026\043\021" +
    "\045\027\047\105\050\106\051\104\052\025\055\015\063" +
    "\012\065\017\067\023\001\002\000\044\004\uffff\042\uffff" +
    "\043\uffff\045\uffff\047\uffff\050\uffff\051\uffff\052\uffff\054" +
    "\uffff\055\uffff\057\uffff\063\uffff\064\uffff\065\uffff\066\uffff" +
    "\067\uffff\107\uffff\001\002\000\044\004\uffd6\042\uffd6\043" +
    "\uffd6\045\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\054\uffd6" +
    "\055\uffd6\057\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067" +
    "\uffd6\107\uffd6\001\002\000\022\004\026\043\021\045\027" +
    "\052\025\055\015\063\012\065\017\067\023\001\002\000" +
    "\020\006\036\007\041\021\034\026\035\040\040\100\032" +
    "\101\037\001\002\000\004\051\114\001\002\000\006\047" +
    "\105\051\111\001\002\000\044\004\uffd7\042\uffd7\043\uffd7" +
    "\045\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\054\uffd7\055" +
    "\uffd7\057\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7" +
    "\107\uffd7\001\002\000\004\051\113\001\002\000\044\004" +
    "\uffd9\042\uffd9\043\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\054\uffd9\055\uffd9\057\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\107\uffd9\001\002\000\044\004\uffd8" +
    "\042\uffd8\043\uffd8\045\uffd8\047\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\054\uffd8\055\uffd8\057\uffd8\063\uffd8\064\uffd8\065\uffd8" +
    "\066\uffd8\067\uffd8\107\uffd8\001\002\000\010\036\073\037" +
    "\072\046\116\001\002\000\022\004\026\043\021\045\027" +
    "\052\025\055\015\063\012\065\017\067\023\001\002\000" +
    "\030\004\026\043\021\045\027\047\uffd4\050\106\051\uffd4" +
    "\052\025\055\015\063\012\065\017\067\023\001\002\000" +
    "\006\047\uffd5\051\uffd5\001\002\000\024\004\026\043\021" +
    "\045\027\051\uffd3\052\025\055\015\063\012\065\017\067" +
    "\023\001\002\000\024\020\052\021\044\022\053\023\046" +
    "\024\054\053\uffd0\056\uffd0\060\uffd0\110\uffd0\001\002\000" +
    "\004\053\126\001\002\000\014\021\uffcf\053\uffcf\056\uffcf" +
    "\060\uffcf\110\uffcf\001\002\000\012\053\uffd1\056\uffd1\060" +
    "\uffd1\110\uffd1\001\002\000\004\107\127\001\002\000\014" +
    "\004\124\006\036\007\041\021\034\026\035\001\002\000" +
    "\004\047\131\001\002\000\004\046\132\001\002\000\022" +
    "\004\026\043\021\045\027\052\025\055\015\063\012\065" +
    "\017\067\023\001\002\000\024\004\026\043\021\045\027" +
    "\052\025\054\134\055\015\063\012\065\017\067\023\001" +
    "\002\000\044\004\uffd2\042\uffd2\043\uffd2\045\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\054\uffd2\055\uffd2\057\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\107\uffd2\001\002" +
    "\000\004\110\136\001\002\000\004\046\137\001\002\000" +
    "\022\004\026\043\021\045\027\052\025\055\015\063\012" +
    "\065\017\067\023\001\002\000\026\004\026\043\021\045" +
    "\027\047\uffcd\052\025\055\015\063\012\065\017\067\023" +
    "\107\127\001\002\000\004\047\uffce\001\002\000\010\036" +
    "\073\037\072\106\152\001\002\000\004\106\151\001\002" +
    "\000\004\106\150\001\002\000\032\020\052\021\044\022" +
    "\053\023\046\024\054\030\055\031\051\032\047\033\045" +
    "\034\043\035\050\106\147\001\002\000\004\106\uffda\001" +
    "\002\000\044\004\uffc2\042\uffc2\043\uffc2\045\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\054\uffc2\055\uffc2\057\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\107\uffc2\001\002" +
    "\000\044\004\uffc3\042\uffc3\043\uffc3\045\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\054\uffc3\055\uffc3\057\uffc3\063\uffc3" +
    "\064\uffc3\065\uffc3\066\uffc3\067\uffc3\107\uffc3\001\002\000" +
    "\044\004\uffc0\042\uffc0\043\uffc0\045\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\054\uffc0\055\uffc0\057\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\066\uffc0\067\uffc0\107\uffc0\001\002\000\044" +
    "\004\uffc1\042\uffc1\043\uffc1\045\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\054\uffc1\055\uffc1\057\uffc1\063\uffc1\064\uffc1" +
    "\065\uffc1\066\uffc1\067\uffc1\107\uffc1\001\002\000\006\061" +
    "\155\104\154\001\002\000\004\004\176\001\002\000\012" +
    "\014\157\015\161\016\160\017\156\001\002\000\004\044" +
    "\173\001\002\000\004\044\170\001\002\000\004\044\165" +
    "\001\002\000\004\044\162\001\002\000\004\013\163\001" +
    "\002\000\004\106\164\001\002\000\044\004\ufff5\042\ufff5" +
    "\043\ufff5\045\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\054" +
    "\ufff5\055\ufff5\057\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5" +
    "\067\ufff5\107\ufff5\001\002\000\020\006\036\007\041\021" +
    "\034\026\035\040\040\100\032\101\037\001\002\000\010" +
    "\036\073\037\072\106\167\001\002\000\044\004\ufff3\042" +
    "\ufff3\043\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3" +
    "\054\ufff3\055\ufff3\057\ufff3\063\ufff3\064\ufff3\065\ufff3\066" +
    "\ufff3\067\ufff3\107\ufff3\001\002\000\012\006\036\007\041" +
    "\021\034\026\035\001\002\000\016\020\052\021\044\022" +
    "\053\023\046\024\054\106\172\001\002\000\044\004\ufff4" +
    "\042\ufff4\043\ufff4\045\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\054\ufff4\055\ufff4\057\ufff4\063\ufff4\064\ufff4\065\ufff4" +
    "\066\ufff4\067\ufff4\107\ufff4\001\002\000\004\005\146\001" +
    "\002\000\004\106\175\001\002\000\044\004\ufff2\042\ufff2" +
    "\043\ufff2\045\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\054" +
    "\ufff2\055\ufff2\057\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2" +
    "\067\ufff2\107\ufff2\001\002\000\010\021\uffe7\061\uffe7\104" +
    "\uffe7\001\002\000\024\004\026\043\021\045\027\052\025" +
    "\055\015\063\012\065\017\066\202\067\023\001\002\000" +
    "\020\006\036\007\041\021\034\026\035\040\040\100\032" +
    "\101\037\001\002\000\050\004\uffc4\036\073\037\072\042" +
    "\uffc4\043\uffc4\045\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\054\uffc4\055\uffc4\057\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\067\uffc4\107\uffc4\001\002\000\020\006\036\007\041" +
    "\021\034\026\035\040\040\100\032\101\037\001\002\000" +
    "\050\004\uffc5\036\073\037\072\042\uffc5\043\uffc5\045\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\055\uffc5\057" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\107\uffc5" +
    "\001\002\000\004\021\205\001\002\000\004\105\206\001" +
    "\002\000\014\004\124\006\036\007\041\021\034\026\035" +
    "\001\002\000\004\056\210\001\002\000\014\004\124\006" +
    "\036\007\041\021\034\026\035\001\002\000\006\053\212" +
    "\060\213\001\002\000\024\004\026\043\021\045\027\052" +
    "\025\055\015\057\224\063\012\065\017\067\023\001\002" +
    "\000\004\062\221\001\002\000\004\053\215\001\002\000" +
    "\024\004\026\043\021\045\027\052\025\055\015\057\217" +
    "\063\012\065\017\067\023\001\002\000\024\004\026\043" +
    "\021\045\027\052\025\055\015\057\220\063\012\065\017" +
    "\067\023\001\002\000\044\004\uffca\042\uffca\043\uffca\045" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\054\uffca\055\uffca" +
    "\057\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\107" +
    "\uffca\001\002\000\044\004\uffcc\042\uffcc\043\uffcc\045\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\054\uffcc\055\uffcc\057" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\107\uffcc" +
    "\001\002\000\014\004\124\006\036\007\041\021\034\026" +
    "\035\001\002\000\004\053\uffc8\001\002\000\024\004\026" +
    "\043\021\045\027\052\025\055\015\057\225\063\012\065" +
    "\017\067\023\001\002\000\044\004\uffc9\042\uffc9\043\uffc9" +
    "\045\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\054\uffc9\055" +
    "\uffc9\057\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9" +
    "\107\uffc9\001\002\000\044\004\uffcb\042\uffcb\043\uffcb\045" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\054\uffcb\055\uffcb" +
    "\057\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\107" +
    "\uffcb\001\002\000\010\036\073\037\072\053\227\001\002" +
    "\000\024\004\026\043\021\045\027\052\025\055\015\063" +
    "\012\064\231\065\017\067\023\001\002\000\024\004\026" +
    "\043\021\045\027\052\025\055\015\063\012\064\232\065" +
    "\017\067\023\001\002\000\044\004\uffc6\042\uffc6\043\uffc6" +
    "\045\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\054\uffc6\055" +
    "\uffc6\057\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6" +
    "\107\uffc6\001\002\000\044\004\uffc7\042\uffc7\043\uffc7\045" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\054\uffc7\055\uffc7" +
    "\057\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\107" +
    "\uffc7\001\002\000\004\105\234\001\002\000\012\006\036" +
    "\007\041\021\034\026\035\001\002\000\016\020\052\021" +
    "\044\022\053\023\046\024\054\106\236\001\002\000\044" +
    "\004\uffe8\042\uffe8\043\uffe8\045\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\054\uffe8\055\uffe8\057\uffe8\063\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\107\uffe8\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\002\004\001\001\000\030\003\006\004" +
    "\015\005\017\007\021\010\010\013\013\016\012\022\027" +
    "\024\007\025\030\026\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\102\005\017\007\021\010\010" +
    "\013\013\016\012\022\027\024\007\025\030\026\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\041" +
    "\011\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\203\001\001\000\002\001\001\000\030\003\176" +
    "\004\015\005\017\007\021\010\010\013\013\016\012\022" +
    "\027\024\007\025\030\026\023\001\001\000\002\001\001" +
    "\000\004\010\152\001\001\000\002\001\001\000\010\006" +
    "\144\011\141\012\142\001\001\000\002\001\001\000\010" +
    "\006\121\017\122\021\124\001\001\000\002\001\001\000" +
    "\006\006\041\011\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\077\001\001\000\004\006\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\041\011\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\067\001\001" +
    "\000\004\006\066\001\001\000\004\006\065\001\001\000" +
    "\004\006\064\001\001\000\004\006\063\001\001\000\004" +
    "\006\062\001\001\000\004\006\061\001\001\000\004\006" +
    "\060\001\001\000\004\006\057\001\001\000\004\006\056" +
    "\001\001\000\004\006\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\041\011\074\001\001\000" +
    "\006\006\041\011\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\101\004\015\005\017\007\021\010\010" +
    "\013\013\016\012\022\027\024\007\025\030\026\023\001" +
    "\001\000\032\004\102\005\017\007\021\010\010\013\013" +
    "\014\107\015\106\016\012\022\027\024\007\025\030\026" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\120\004\015\005\017\007\021\010\010\013\013\016" +
    "\012\022\027\024\007\025\030\026\023\001\001\000\006" +
    "\006\041\011\114\001\001\000\002\001\001\000\004\015" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\116\004\015\005\017\007\021\010\010\013\013\016\012" +
    "\022\027\024\007\025\030\026\023\001\001\000\030\004" +
    "\102\005\017\007\021\010\010\013\013\014\117\016\012" +
    "\022\027\024\007\025\030\026\023\001\001\000\002\001" +
    "\001\000\026\004\102\005\017\007\021\010\010\013\013" +
    "\016\012\022\027\024\007\025\030\026\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\127\001\001\000\010\006\121\017" +
    "\134\021\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\132\004\015\005\017\007\021\010\010\013" +
    "\013\016\012\022\027\024\007\025\030\026\023\001\001" +
    "\000\026\004\102\005\017\007\021\010\010\013\013\016" +
    "\012\022\027\024\007\025\030\026\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\137\004\015\005\017\007\021\010\010\013\013\016\012" +
    "\022\027\024\007\025\030\026\023\001\001\000\030\004" +
    "\102\005\017\007\021\010\010\013\013\016\012\020\140" +
    "\022\027\024\007\025\030\026\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\041\011\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\102\005" +
    "\017\007\021\010\010\013\013\016\012\022\027\024\007" +
    "\025\030\026\023\001\001\000\006\006\041\011\200\001" +
    "\001\000\002\001\001\000\006\006\041\011\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\121\017\206\021\124\001\001\000\002\001\001" +
    "\000\010\006\121\017\210\021\124\001\001\000\004\023" +
    "\213\001\001\000\030\003\222\004\015\005\017\007\021" +
    "\010\010\013\013\016\012\022\027\024\007\025\030\026" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\215\004\015\005\017\007\021\010\010\013\013\016" +
    "\012\022\027\024\007\025\030\026\023\001\001\000\026" +
    "\004\102\005\017\007\021\010\010\013\013\016\012\022" +
    "\027\024\007\025\030\026\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\121\017\221\021\124\001" +
    "\001\000\002\001\001\000\026\004\102\005\017\007\021" +
    "\010\010\013\013\016\012\022\027\024\007\025\030\026" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\227\004\015\005\017\007\021\010" +
    "\010\013\013\016\012\022\027\024\007\025\030\026\023" +
    "\001\001\000\026\004\102\005\017\007\021\010\010\013" +
    "\013\016\012\022\027\024\007\025\030\026\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  

    public LinkedList<instruccion> arbol;

    public LinkedList<instruccion> getArbol(){
    return arbol;
    }


  public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
   

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PR_INICIO instrucciones PR_FIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= condicional_si 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= condicional_segun 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= ciclopara 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= ciclomientras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= ciclorepetirhasta 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= retorno 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= PR_INGRESAR listaVariable PR_COMO PR_CAD PR_CONVALOR STRING S_PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("declaracion:CADENA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= PR_INGRESAR listaVariable PR_COMO PR_NUM PR_CONVALOR expresion_num S_PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("declaracion:NUMERICA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= PR_INGRESAR listaVariable PR_COMO PR_BOOL PR_CONVALOR expresion_logica S_PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("declaracion:LOGICA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= PR_INGRESAR listaVariable PR_COMO PR_CAR PR_CONVALOR expresion_char S_PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("declaracion:CARACTER");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion_num ::= expresion_num PR_SUMA expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion_num ::= expresion_num PR_RESTA expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion_num ::= expresion_num PR_MULT expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion_num ::= PR_RESTA expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion_num ::= expresion_num PR_DIV expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_num ::= expresion_num PR_POT expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_num ::= PR_PARABRE expresion_num PR_PARCIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_num ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_num ::= DOUBLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignacion ::= listaVariable PR_RESTA S_MAYORQ expresion_num S_PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("declaracion:Asignacion");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listaVariable ::= listaVariable S_COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaVariable",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listaVariable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaVariable",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_logica ::= PR_VERDADERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_logica ::= PR_FALSO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_logica ::= expresion_num PR_MAYOR expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_logica ::= expresion_num PR_MENOR expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_logica ::= expresion_num PR_MAYOROIGUAL expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_logica ::= expresion_num PR_MENOROIGUAL expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_logica ::= expresion_num PR_IGUAL expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_logica ::= expresion_num PR_DIFERENTE expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_logica ::= expresion_logica PR_OR expresion_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_logica ::= expresion_logica PR_AND expresion_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_logica ::= PR_NOT expresion_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_char ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_char",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicional_si ::= PR_SI expresion_logica PR_ENTONCES instrucciones o_si de_lo_contrario PR_FINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		System.out.println("Trae ambos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicional_si",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicional_si ::= PR_SI expresion_logica PR_ENTONCES instrucciones de_lo_contrario PR_FINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		System.out.println("de lo contrario");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicional_si",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicional_si ::= PR_SI expresion_logica PR_ENTONCES instrucciones o_si PR_FINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		System.out.println("o si ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicional_si",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicional_si ::= PR_SI expresion_logica PR_ENTONCES instrucciones PR_FINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("ninguno");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicional_si",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // o_si ::= PR_OSI expresion_logica PR_ENTONCES instrucciones o_si 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("o_si",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // o_si ::= PR_OSI expresion_logica PR_ENTONCES instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("o_si",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // de_lo_contrario ::= PR_DELOCONTRARIO instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("de_lo_contrario",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicional_segun ::= PR_SEGUN valor PR_HACER opciones PR_DELOCONTRARIO PR_ENTONCES instrucciones PR_FINSEGUN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicional_segun",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valor ::= variables 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valor ::= expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variables ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // opciones ::= S_INTERROGACIONABRE valor S_INTERROGACIONCIERRA PR_ENTONCES instrucciones opciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // opciones ::= S_INTERROGACIONABRE valor S_INTERROGACIONCIERRA PR_ENTONCES instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ciclopara ::= PR_PARA variables PR_RESTA S_MAYORQ valor PR_HASTA valor incremental PR_HACER instrucciones PR_FINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclopara",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ciclopara ::= PR_PARA variables PR_RESTA S_MAYORQ valor PR_HASTA valor PR_HACER instrucciones PR_FINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclopara",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ciclopara ::= PR_PARA variables PR_RESTA S_MAYORQ valor PR_HASTA valor incremental PR_HACER PR_FINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclopara",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ciclopara ::= PR_PARA variables PR_RESTA S_MAYORQ valor PR_HASTA valor PR_HACER PR_FINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclopara",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // incremental ::= PR_CON PR_INCREMENTAL valor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("incremental",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ciclomientras ::= PR_MIENTRAS expresion_logica PR_HACER instrucciones PR_FINMIENTRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclomientras",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ciclomientras ::= PR_MIENTRAS expresion_logica PR_HACER PR_FINMIENTRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclomientras",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ciclorepetirhasta ::= PR_REPETIR instrucciones PR_HASTAQUE expresion_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclorepetirhasta",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ciclorepetirhasta ::= PR_REPETIR PR_HASTAQUE expresion_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclorepetirhasta",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // retorno ::= PR_RETORNAR STRING S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Retorno String");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("retorno",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // retorno ::= PR_RETORNAR expresion_num S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Retorno numerico");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("retorno",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // retorno ::= PR_RETORNAR expresion_logica S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Retorno logico");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("retorno",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // retorno ::= PR_RETORNAR expresion_char S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Retorno Char");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("retorno",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
