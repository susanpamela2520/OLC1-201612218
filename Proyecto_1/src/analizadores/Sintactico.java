
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import arbol.instruccion;
import arbol.Operacion;
import arbol.Variable;
import arbol.Declaracion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\007\011\000\002\007\011" +
    "\000\002\007\011\000\002\007\011\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\003\000\002\006\003\000\002\005\007\000\002\010\005" +
    "\000\002\010\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\004\000\002\012\003" +
    "\000\002\013\011\000\002\013\010\000\002\013\010\000" +
    "\002\013\007\000\002\014\007\000\002\014\006\000\002" +
    "\015\004\000\002\016\012\000\002\017\003\000\002\017" +
    "\003\000\002\021\003\000\002\020\010\000\002\020\007" +
    "\000\002\022\015\000\002\022\014\000\002\022\014\000" +
    "\002\022\013\000\002\023\005\000\002\024\007\000\002" +
    "\024\006\000\002\025\006\000\002\025\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\027\006\000\002\027\012\000\002\030\005\000" +
    "\002\030\004\000\002\031\006\000\002\031\005\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\007\000\002\033\013" +
    "\000\002\035\007\000\002\035\010\000\002\036\004\000" +
    "\002\036\003\000\002\037\005\000\002\037\004\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\005" +
    "\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\004\041\004\001\002\000\034\004\034\043" +
    "\025\045\036\052\033\055\021\063\015\065\023\067\030" +
    "\070\037\073\013\075\031\076\014\077\035\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\062" +
    "\004\ufff5\042\ufff5\043\ufff5\045\ufff5\047\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\054\ufff5\055\ufff5\057\ufff5\063\ufff5\064\ufff5" +
    "\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\073\ufff5\074" +
    "\ufff5\075\ufff5\076\ufff5\077\ufff5\107\ufff5\001\002\000\036" +
    "\004\034\042\344\043\025\045\036\052\033\055\021\063" +
    "\015\065\023\067\030\070\037\073\013\075\031\076\014" +
    "\077\035\001\002\000\062\004\ufff8\042\ufff8\043\ufff8\045" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\054\ufff8\055\ufff8" +
    "\057\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8" +
    "\107\ufff8\001\002\000\006\021\340\104\237\001\002\000" +
    "\004\004\044\001\002\000\024\005\166\006\077\007\102" +
    "\013\320\021\075\026\076\040\101\100\073\101\100\001" +
    "\002\000\020\006\077\007\102\021\075\026\076\040\101" +
    "\100\073\101\100\001\002\000\062\004\ufffa\042\ufffa\043" +
    "\ufffa\045\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\054\ufffa" +
    "\055\ufffa\057\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa" +
    "\077\ufffa\107\ufffa\001\002\000\062\004\ufff2\042\ufff2\043" +
    "\ufff2\045\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\054\ufff2" +
    "\055\ufff2\057\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067" +
    "\ufff2\070\ufff2\071\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2" +
    "\077\ufff2\107\ufff2\001\002\000\062\004\ufffb\042\ufffb\043" +
    "\ufffb\045\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\054\ufffb" +
    "\055\ufffb\057\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067" +
    "\ufffb\070\ufffb\071\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb" +
    "\077\ufffb\107\ufffb\001\002\000\004\004\044\001\002\000" +
    "\062\004\ufffe\042\ufffe\043\ufffe\045\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\054\ufffe\055\ufffe\057\ufffe\063\ufffe\064" +
    "\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\073\ufffe" +
    "\074\ufffe\075\ufffe\076\ufffe\077\ufffe\107\ufffe\001\002\000" +
    "\036\004\034\043\025\045\036\052\033\055\021\063\015" +
    "\065\023\066\263\067\030\070\037\073\013\075\031\076" +
    "\014\077\035\001\002\000\062\004\ufffc\042\ufffc\043\ufffc" +
    "\045\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\054\ufffc\055" +
    "\ufffc\057\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc" +
    "\070\ufffc\071\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077" +
    "\ufffc\107\ufffc\001\002\000\004\004\034\001\002\000\062" +
    "\004\ufff3\042\ufff3\043\ufff3\045\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\054\ufff3\055\ufff3\057\ufff3\063\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\073\ufff3\074" +
    "\ufff3\075\ufff3\076\ufff3\077\ufff3\107\ufff3\001\002\000\062" +
    "\004\ufffd\042\ufffd\043\ufffd\045\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\054\ufffd\055\ufffd\057\ufffd\063\ufffd\064\ufffd" +
    "\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\073\ufffd\074" +
    "\ufffd\075\ufffd\076\ufffd\077\ufffd\107\ufffd\001\002\000\024" +
    "\005\166\006\077\007\102\013\230\021\075\026\076\040" +
    "\101\100\073\101\100\001\002\000\004\004\044\001\002" +
    "\000\062\004\ufff6\042\ufff6\043\ufff6\045\ufff6\047\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\054\ufff6\055\ufff6\057\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\073" +
    "\ufff6\074\ufff6\075\ufff6\076\ufff6\077\ufff6\107\ufff6\001\002" +
    "\000\014\004\044\006\077\007\102\021\075\026\076\001" +
    "\002\000\010\021\uffe1\061\uffe1\104\uffe1\001\002\000\024" +
    "\005\166\006\077\007\102\013\164\021\075\026\076\040" +
    "\101\100\073\101\100\001\002\000\020\006\077\007\102" +
    "\021\075\026\076\040\101\100\073\101\100\001\002\000" +
    "\004\004\044\001\002\000\062\004\ufff1\042\ufff1\043\ufff1" +
    "\045\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\054\ufff1\055" +
    "\ufff1\057\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1" +
    "\070\ufff1\071\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077" +
    "\ufff1\107\ufff1\001\002\000\062\004\ufff4\042\ufff4\043\ufff4" +
    "\045\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\054\ufff4\055" +
    "\ufff4\057\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4" +
    "\070\ufff4\071\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077" +
    "\ufff4\107\ufff4\001\002\000\062\004\ufff9\042\ufff9\043\ufff9" +
    "\045\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\054\ufff9\055" +
    "\ufff9\057\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9" +
    "\070\ufff9\071\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077" +
    "\ufff9\107\ufff9\001\002\000\062\004\ufff7\042\ufff7\043\ufff7" +
    "\045\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\054\ufff7\055" +
    "\ufff7\057\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7" +
    "\070\ufff7\071\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077" +
    "\ufff7\107\ufff7\001\002\000\070\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\013\uffca\016\uffca\021\uffca\026\uffca\027\uffca\043" +
    "\uffca\045\uffca\052\uffca\053\uffca\055\uffca\056\uffca\060\uffca" +
    "\063\uffca\065\uffca\067\uffca\070\uffca\072\uffca\073\uffca\075" +
    "\uffca\076\uffca\077\uffca\104\uffca\110\uffca\001\002\000\036" +
    "\004\034\043\025\045\036\052\033\055\021\063\015\065" +
    "\023\067\030\070\037\072\047\073\013\075\031\076\014" +
    "\077\035\001\002\000\036\004\034\043\025\045\036\052" +
    "\033\055\021\063\015\065\023\067\030\070\037\071\072" +
    "\073\013\075\031\076\014\077\035\001\002\000\004\026" +
    "\050\001\002\000\004\004\044\001\002\000\004\027\066" +
    "\001\002\000\014\005\057\006\060\007\055\013\054\016" +
    "\056\001\002\000\006\027\uffb7\104\062\001\002\000\042" +
    "\004\uffb4\027\uffb4\043\uffb4\045\uffb4\052\uffb4\055\uffb4\063" +
    "\uffb4\065\uffb4\067\uffb4\070\uffb4\072\uffb4\073\uffb4\075\uffb4" +
    "\076\uffb4\077\uffb4\104\uffb4\001\002\000\042\004\uffb1\027" +
    "\uffb1\043\uffb1\045\uffb1\052\uffb1\055\uffb1\063\uffb1\065\uffb1" +
    "\067\uffb1\070\uffb1\072\uffb1\073\uffb1\075\uffb1\076\uffb1\077" +
    "\uffb1\104\uffb1\001\002\000\042\004\uffb0\027\uffb0\043\uffb0" +
    "\045\uffb0\052\uffb0\055\uffb0\063\uffb0\065\uffb0\067\uffb0\070" +
    "\uffb0\072\uffb0\073\uffb0\075\uffb0\076\uffb0\077\uffb0\104\uffb0" +
    "\001\002\000\042\004\uffb3\027\uffb3\043\uffb3\045\uffb3\052" +
    "\uffb3\055\uffb3\063\uffb3\065\uffb3\067\uffb3\070\uffb3\072\uffb3" +
    "\073\uffb3\075\uffb3\076\uffb3\077\uffb3\104\uffb3\001\002\000" +
    "\042\004\uffb2\027\uffb2\043\uffb2\045\uffb2\052\uffb2\055\uffb2" +
    "\063\uffb2\065\uffb2\067\uffb2\070\uffb2\072\uffb2\073\uffb2\075" +
    "\uffb2\076\uffb2\077\uffb2\104\uffb2\001\002\000\004\027\uffb8" +
    "\001\002\000\004\004\044\001\002\000\014\005\057\006" +
    "\060\007\055\013\054\016\056\001\002\000\006\027\uffb5" +
    "\104\062\001\002\000\004\027\uffb6\001\002\000\034\004" +
    "\034\043\025\045\036\052\033\055\021\063\015\065\023" +
    "\067\030\070\037\073\013\075\031\076\014\077\035\001" +
    "\002\000\036\004\034\043\025\045\036\052\033\055\021" +
    "\063\015\065\023\067\030\070\037\071\071\073\013\075" +
    "\031\076\014\077\035\001\002\000\062\004\uffff\042\uffff" +
    "\043\uffff\045\uffff\047\uffff\050\uffff\051\uffff\052\uffff\054" +
    "\uffff\055\uffff\057\uffff\063\uffff\064\uffff\065\uffff\066\uffff" +
    "\067\uffff\070\uffff\071\uffff\073\uffff\074\uffff\075\uffff\076" +
    "\uffff\077\uffff\107\uffff\001\002\000\062\004\uffb9\042\uffb9" +
    "\043\uffb9\045\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\054" +
    "\uffb9\055\uffb9\057\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9" +
    "\067\uffb9\070\uffb9\071\uffb9\073\uffb9\074\uffb9\075\uffb9\076" +
    "\uffb9\077\uffb9\107\uffb9\001\002\000\062\004\uffba\042\uffba" +
    "\043\uffba\045\uffba\047\uffba\050\uffba\051\uffba\052\uffba\054" +
    "\uffba\055\uffba\057\uffba\063\uffba\064\uffba\065\uffba\066\uffba" +
    "\067\uffba\070\uffba\071\uffba\073\uffba\074\uffba\075\uffba\076" +
    "\uffba\077\uffba\107\uffba\001\002\000\074\004\uffe0\036\uffe0" +
    "\037\uffe0\042\uffe0\043\uffe0\045\uffe0\046\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\057\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071" +
    "\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\106\uffe0" +
    "\107\uffe0\001\002\000\010\036\134\037\133\046\142\001" +
    "\002\000\012\006\077\007\102\021\075\026\076\001\002" +
    "\000\012\006\077\007\102\021\075\026\076\001\002\000" +
    "\132\004\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\042\uffe5\043\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\070\uffe5\071\uffe5\073\uffe5\074\uffe5\075" +
    "\uffe5\076\uffe5\077\uffe5\106\uffe5\107\uffe5\110\uffe5\001\002" +
    "\000\074\004\uffdf\036\uffdf\037\uffdf\042\uffdf\043\uffdf\045" +
    "\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf" +
    "\054\uffdf\055\uffdf\057\uffdf\063\uffdf\064\uffdf\065\uffdf\066" +
    "\uffdf\067\uffdf\070\uffdf\071\uffdf\073\uffdf\074\uffdf\075\uffdf" +
    "\076\uffdf\077\uffdf\106\uffdf\107\uffdf\001\002\000\020\006" +
    "\077\007\102\021\075\026\076\040\101\100\073\101\100" +
    "\001\002\000\132\004\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\042\uffe4\043\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\063\uffe4\064" +
    "\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\073\uffe4" +
    "\074\uffe4\075\uffe4\076\uffe4\077\uffe4\106\uffe4\107\uffe4\110" +
    "\uffe4\001\002\000\030\020\113\021\105\022\114\023\110" +
    "\024\115\030\116\031\112\032\107\033\106\034\104\035" +
    "\111\001\002\000\012\006\077\007\102\021\075\026\076" +
    "\001\002\000\012\006\077\007\102\021\075\026\076\001" +
    "\002\000\012\006\077\007\102\021\075\026\076\001\002" +
    "\000\012\006\077\007\102\021\075\026\076\001\002\000" +
    "\012\006\077\007\102\021\075\026\076\001\002\000\012" +
    "\006\077\007\102\021\075\026\076\001\002\000\012\006" +
    "\077\007\102\021\075\026\076\001\002\000\012\006\077" +
    "\007\102\021\075\026\076\001\002\000\012\006\077\007" +
    "\102\021\075\026\076\001\002\000\012\006\077\007\102" +
    "\021\075\026\076\001\002\000\012\006\077\007\102\021" +
    "\075\026\076\001\002\000\106\004\uffde\020\113\021\105" +
    "\022\114\023\110\024\115\036\uffde\037\uffde\042\uffde\043" +
    "\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\057\uffde\063\uffde\064\uffde\065" +
    "\uffde\066\uffde\067\uffde\070\uffde\071\uffde\073\uffde\074\uffde" +
    "\075\uffde\076\uffde\077\uffde\106\uffde\107\uffde\001\002\000" +
    "\132\004\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\042\uffe7\043\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\063\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\070\uffe7\071\uffe7\073\uffe7\074\uffe7\075" +
    "\uffe7\076\uffe7\077\uffe7\106\uffe7\107\uffe7\110\uffe7\001\002" +
    "\000\132\004\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\115\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\042\uffea\043\uffea\045\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\060\uffea\063\uffea\064\uffea\065" +
    "\uffea\066\uffea\067\uffea\070\uffea\071\uffea\073\uffea\074\uffea" +
    "\075\uffea\076\uffea\077\uffea\106\uffea\107\uffea\110\uffea\001" +
    "\002\000\132\004\uffec\020\uffec\021\uffec\022\114\023\110" +
    "\024\115\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\042\uffec\043\uffec\045\uffec" +
    "\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054" +
    "\uffec\055\uffec\056\uffec\057\uffec\060\uffec\063\uffec\064\uffec" +
    "\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec\073\uffec\074" +
    "\uffec\075\uffec\076\uffec\077\uffec\106\uffec\107\uffec\110\uffec" +
    "\001\002\000\106\004\uffdd\020\113\021\105\022\114\023" +
    "\110\024\115\036\uffdd\037\uffdd\042\uffdd\043\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\057\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\067\uffdd\070\uffdd\071\uffdd\073\uffdd\074\uffdd\075\uffdd\076" +
    "\uffdd\077\uffdd\106\uffdd\107\uffdd\001\002\000\106\004\uffd9" +
    "\020\113\021\105\022\114\023\110\024\115\036\uffd9\037" +
    "\uffd9\042\uffd9\043\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\057\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9" +
    "\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\106\uffd9\107" +
    "\uffd9\001\002\000\132\004\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\115\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\042\uffe8\043\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\063\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\073" +
    "\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\106\uffe8\107\uffe8" +
    "\110\uffe8\001\002\000\106\004\uffdc\020\113\021\105\022" +
    "\114\023\110\024\115\036\uffdc\037\uffdc\042\uffdc\043\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\057\uffdc\063\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\067\uffdc\070\uffdc\071\uffdc\073\uffdc\074\uffdc\075" +
    "\uffdc\076\uffdc\077\uffdc\106\uffdc\107\uffdc\001\002\000\106" +
    "\004\uffdb\020\113\021\105\022\114\023\110\024\115\036" +
    "\uffdb\037\uffdb\042\uffdb\043\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\057" +
    "\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb" +
    "\071\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\106" +
    "\uffdb\107\uffdb\001\002\000\132\004\uffeb\020\uffeb\021\uffeb" +
    "\022\114\023\110\024\115\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\042\uffeb" +
    "\043\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb" +
    "\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071" +
    "\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\106\uffeb" +
    "\107\uffeb\110\uffeb\001\002\000\106\004\uffda\020\113\021" +
    "\105\022\114\023\110\024\115\036\uffda\037\uffda\042\uffda" +
    "\043\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052" +
    "\uffda\053\uffda\054\uffda\055\uffda\057\uffda\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\067\uffda\070\uffda\071\uffda\073\uffda\074" +
    "\uffda\075\uffda\076\uffda\077\uffda\106\uffda\107\uffda\001\002" +
    "\000\074\004\uffd6\036\134\037\133\042\uffd6\043\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\057\uffd6\063\uffd6\064\uffd6\065\uffd6\066" +
    "\uffd6\067\uffd6\070\uffd6\071\uffd6\073\uffd6\074\uffd6\075\uffd6" +
    "\076\uffd6\077\uffd6\106\uffd6\107\uffd6\001\002\000\020\006" +
    "\077\007\102\021\075\026\076\040\101\100\073\101\100" +
    "\001\002\000\020\006\077\007\102\021\075\026\076\040" +
    "\101\100\073\101\100\001\002\000\074\004\uffd8\036\uffd8" +
    "\037\uffd8\042\uffd8\043\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\057\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071" +
    "\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\106\uffd8" +
    "\107\uffd8\001\002\000\074\004\uffd7\036\uffd7\037\uffd7\042" +
    "\uffd7\043\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\055\uffd7\057\uffd7\063\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\073\uffd7" +
    "\074\uffd7\075\uffd7\076\uffd7\077\uffd7\106\uffd7\107\uffd7\001" +
    "\002\000\016\020\113\021\105\022\114\023\110\024\115" +
    "\027\140\001\002\000\132\004\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\042\uffe6\043" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6" +
    "\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\106\uffe6\107" +
    "\uffe6\110\uffe6\001\002\000\132\004\uffe9\020\uffe9\021\uffe9" +
    "\022\114\023\110\024\115\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\042\uffe9" +
    "\043\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071" +
    "\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\106\uffe9" +
    "\107\uffe9\110\uffe9\001\002\000\034\004\034\043\025\045" +
    "\036\052\033\055\021\063\015\065\023\067\030\070\037" +
    "\073\013\075\031\076\014\077\035\001\002\000\042\004" +
    "\034\043\025\045\036\047\145\050\146\051\144\052\033" +
    "\055\021\063\015\065\023\067\030\070\037\073\013\075" +
    "\031\076\014\077\035\001\002\000\062\004\uffd1\042\uffd1" +
    "\043\uffd1\045\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\054" +
    "\uffd1\055\uffd1\057\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1" +
    "\067\uffd1\070\uffd1\071\uffd1\073\uffd1\074\uffd1\075\uffd1\076" +
    "\uffd1\077\uffd1\107\uffd1\001\002\000\034\004\034\043\025" +
    "\045\036\052\033\055\021\063\015\065\023\067\030\070" +
    "\037\073\013\075\031\076\014\077\035\001\002\000\020" +
    "\006\077\007\102\021\075\026\076\040\101\100\073\101" +
    "\100\001\002\000\006\047\145\051\152\001\002\000\004" +
    "\051\151\001\002\000\062\004\uffd3\042\uffd3\043\uffd3\045" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\054\uffd3\055\uffd3" +
    "\057\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070" +
    "\uffd3\071\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3" +
    "\107\uffd3\001\002\000\062\004\uffd2\042\uffd2\043\uffd2\045" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\054\uffd2\055\uffd2" +
    "\057\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070" +
    "\uffd2\071\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2" +
    "\107\uffd2\001\002\000\004\051\154\001\002\000\062\004" +
    "\uffd4\042\uffd4\043\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\054\uffd4\055\uffd4\057\uffd4\063\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\073\uffd4\074\uffd4" +
    "\075\uffd4\076\uffd4\077\uffd4\107\uffd4\001\002\000\010\036" +
    "\134\037\133\046\156\001\002\000\034\004\034\043\025" +
    "\045\036\052\033\055\021\063\015\065\023\067\030\070" +
    "\037\073\013\075\031\076\014\077\035\001\002\000\042" +
    "\004\034\043\025\045\036\047\uffcf\050\146\051\uffcf\052" +
    "\033\055\021\063\015\065\023\067\030\070\037\073\013" +
    "\075\031\076\014\077\035\001\002\000\006\047\uffd0\051" +
    "\uffd0\001\002\000\036\004\034\043\025\045\036\051\uffce" +
    "\052\033\055\021\063\015\065\023\067\030\070\037\073" +
    "\013\075\031\076\014\077\035\001\002\000\010\036\134" +
    "\037\133\106\172\001\002\000\004\106\171\001\002\000" +
    "\004\106\170\001\002\000\032\020\113\021\105\022\114" +
    "\023\110\024\115\030\116\031\112\032\107\033\106\034" +
    "\104\035\111\106\167\001\002\000\004\106\uffd5\001\002" +
    "\000\062\004\uffa2\042\uffa2\043\uffa2\045\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\054\uffa2\055\uffa2\057\uffa2\063\uffa2" +
    "\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\073" +
    "\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\107\uffa2\001\002" +
    "\000\062\004\uffa3\042\uffa3\043\uffa3\045\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\054\uffa3\055\uffa3\057\uffa3\063\uffa3" +
    "\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\073" +
    "\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\107\uffa3\001\002" +
    "\000\062\004\uffa0\042\uffa0\043\uffa0\045\uffa0\047\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\054\uffa0\055\uffa0\057\uffa0\063\uffa0" +
    "\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\073" +
    "\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\107\uffa0\001\002" +
    "\000\062\004\uffa1\042\uffa1\043\uffa1\045\uffa1\047\uffa1\050" +
    "\uffa1\051\uffa1\052\uffa1\054\uffa1\055\uffa1\057\uffa1\063\uffa1" +
    "\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\073" +
    "\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\107\uffa1\001\002" +
    "\000\024\020\113\021\105\022\114\023\110\024\115\053" +
    "\uffcb\056\uffcb\060\uffcb\110\uffcb\001\002\000\004\053\176" +
    "\001\002\000\012\053\uffcc\056\uffcc\060\uffcc\110\uffcc\001" +
    "\002\000\004\107\177\001\002\000\014\004\044\006\077" +
    "\007\102\021\075\026\076\001\002\000\004\047\201\001" +
    "\002\000\004\046\202\001\002\000\034\004\034\043\025" +
    "\045\036\052\033\055\021\063\015\065\023\067\030\070" +
    "\037\073\013\075\031\076\014\077\035\001\002\000\036" +
    "\004\034\043\025\045\036\052\033\054\204\055\021\063" +
    "\015\065\023\067\030\070\037\073\013\075\031\076\014" +
    "\077\035\001\002\000\062\004\uffcd\042\uffcd\043\uffcd\045" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\054\uffcd\055\uffcd" +
    "\057\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070" +
    "\uffcd\071\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd" +
    "\107\uffcd\001\002\000\004\110\206\001\002\000\004\046" +
    "\207\001\002\000\034\004\034\043\025\045\036\052\033" +
    "\055\021\063\015\065\023\067\030\070\037\073\013\075" +
    "\031\076\014\077\035\001\002\000\040\004\034\043\025" +
    "\045\036\047\uffc8\052\033\055\021\063\015\065\023\067" +
    "\030\070\037\073\013\075\031\076\014\077\035\107\177" +
    "\001\002\000\004\047\uffc9\001\002\000\004\026\213\001" +
    "\002\000\006\004\044\027\215\001\002\000\004\027\224" +
    "\001\002\000\004\106\223\001\002\000\006\027\uffaa\104" +
    "\220\001\002\000\004\027\uffab\001\002\000\004\004\044" +
    "\001\002\000\006\027\uffa8\104\220\001\002\000\004\027" +
    "\uffa9\001\002\000\062\004\uffad\042\uffad\043\uffad\045\uffad" +
    "\047\uffad\050\uffad\051\uffad\052\uffad\054\uffad\055\uffad\057" +
    "\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad" +
    "\071\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad\107" +
    "\uffad\001\002\000\004\106\225\001\002\000\062\004\uffac" +
    "\042\uffac\043\uffac\045\uffac\047\uffac\050\uffac\051\uffac\052" +
    "\uffac\054\uffac\055\uffac\057\uffac\063\uffac\064\uffac\065\uffac" +
    "\066\uffac\067\uffac\070\uffac\071\uffac\073\uffac\074\uffac\075" +
    "\uffac\076\uffac\077\uffac\107\uffac\001\002\000\010\036\134" +
    "\037\133\106\235\001\002\000\004\106\234\001\002\000" +
    "\004\106\233\001\002\000\032\020\113\021\105\022\114" +
    "\023\110\024\115\030\116\031\112\032\107\033\106\034" +
    "\104\035\111\106\232\001\002\000\062\004\uffbd\042\uffbd" +
    "\043\uffbd\045\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\054" +
    "\uffbd\055\uffbd\057\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\067\uffbd\070\uffbd\071\uffbd\073\uffbd\074\uffbd\075\uffbd\076" +
    "\uffbd\077\uffbd\107\uffbd\001\002\000\062\004\uffbe\042\uffbe" +
    "\043\uffbe\045\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\054" +
    "\uffbe\055\uffbe\057\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe" +
    "\067\uffbe\070\uffbe\071\uffbe\073\uffbe\074\uffbe\075\uffbe\076" +
    "\uffbe\077\uffbe\107\uffbe\001\002\000\062\004\uffbb\042\uffbb" +
    "\043\uffbb\045\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\054" +
    "\uffbb\055\uffbb\057\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\067\uffbb\070\uffbb\071\uffbb\073\uffbb\074\uffbb\075\uffbb\076" +
    "\uffbb\077\uffbb\107\uffbb\001\002\000\062\004\uffbc\042\uffbc" +
    "\043\uffbc\045\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\054" +
    "\uffbc\055\uffbc\057\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc" +
    "\067\uffbc\070\uffbc\071\uffbc\073\uffbc\074\uffbc\075\uffbc\076" +
    "\uffbc\077\uffbc\107\uffbc\001\002\000\006\061\240\104\237" +
    "\001\002\000\004\004\261\001\002\000\012\014\243\015" +
    "\244\016\242\017\241\001\002\000\004\044\256\001\002" +
    "\000\004\044\253\001\002\000\004\044\250\001\002\000" +
    "\004\044\245\001\002\000\004\013\246\001\002\000\004" +
    "\106\247\001\002\000\062\004\ufff0\042\ufff0\043\ufff0\045" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\054\ufff0\055\ufff0" +
    "\057\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070" +
    "\ufff0\071\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0" +
    "\107\ufff0\001\002\000\012\006\077\007\102\021\075\026" +
    "\076\001\002\000\016\020\113\021\105\022\114\023\110" +
    "\024\115\106\252\001\002\000\062\004\uffef\042\uffef\043" +
    "\uffef\045\uffef\047\uffef\050\uffef\051\uffef\052\uffef\054\uffef" +
    "\055\uffef\057\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067" +
    "\uffef\070\uffef\071\uffef\073\uffef\074\uffef\075\uffef\076\uffef" +
    "\077\uffef\107\uffef\001\002\000\020\006\077\007\102\021" +
    "\075\026\076\040\101\100\073\101\100\001\002\000\010" +
    "\036\134\037\133\106\255\001\002\000\062\004\uffee\042" +
    "\uffee\043\uffee\045\uffee\047\uffee\050\uffee\051\uffee\052\uffee" +
    "\054\uffee\055\uffee\057\uffee\063\uffee\064\uffee\065\uffee\066" +
    "\uffee\067\uffee\070\uffee\071\uffee\073\uffee\074\uffee\075\uffee" +
    "\076\uffee\077\uffee\107\uffee\001\002\000\004\005\166\001" +
    "\002\000\004\106\260\001\002\000\062\004\uffed\042\uffed" +
    "\043\uffed\045\uffed\047\uffed\050\uffed\051\uffed\052\uffed\054" +
    "\uffed\055\uffed\057\uffed\063\uffed\064\uffed\065\uffed\066\uffed" +
    "\067\uffed\070\uffed\071\uffed\073\uffed\074\uffed\075\uffed\076" +
    "\uffed\077\uffed\107\uffed\001\002\000\010\021\uffe2\061\uffe2" +
    "\104\uffe2\001\002\000\036\004\034\043\025\045\036\052" +
    "\033\055\021\063\015\065\023\066\265\067\030\070\037" +
    "\073\013\075\031\076\014\077\035\001\002\000\020\006" +
    "\077\007\102\021\075\026\076\040\101\100\073\101\100" +
    "\001\002\000\066\004\uffbf\036\134\037\133\042\uffbf\043" +
    "\uffbf\045\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf" +
    "\055\uffbf\057\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067" +
    "\uffbf\070\uffbf\071\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf" +
    "\077\uffbf\107\uffbf\001\002\000\020\006\077\007\102\021" +
    "\075\026\076\040\101\100\073\101\100\001\002\000\066" +
    "\004\uffc0\036\134\037\133\042\uffc0\043\uffc0\045\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\054\uffc0\055\uffc0\057\uffc0" +
    "\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071" +
    "\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\107\uffc0" +
    "\001\002\000\004\021\270\001\002\000\004\105\271\001" +
    "\002\000\014\004\044\006\077\007\102\021\075\026\076" +
    "\001\002\000\004\056\273\001\002\000\014\004\044\006" +
    "\077\007\102\021\075\026\076\001\002\000\006\053\275" +
    "\060\276\001\002\000\036\004\034\043\025\045\036\052" +
    "\033\055\021\057\307\063\015\065\023\067\030\070\037" +
    "\073\013\075\031\076\014\077\035\001\002\000\004\062" +
    "\304\001\002\000\004\053\300\001\002\000\036\004\034" +
    "\043\025\045\036\052\033\055\021\057\302\063\015\065" +
    "\023\067\030\070\037\073\013\075\031\076\014\077\035" +
    "\001\002\000\036\004\034\043\025\045\036\052\033\055" +
    "\021\057\303\063\015\065\023\067\030\070\037\073\013" +
    "\075\031\076\014\077\035\001\002\000\062\004\uffc5\042" +
    "\uffc5\043\uffc5\045\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\054\uffc5\055\uffc5\057\uffc5\063\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\073\uffc5\074\uffc5\075\uffc5" +
    "\076\uffc5\077\uffc5\107\uffc5\001\002\000\062\004\uffc7\042" +
    "\uffc7\043\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\054\uffc7\055\uffc7\057\uffc7\063\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\067\uffc7\070\uffc7\071\uffc7\073\uffc7\074\uffc7\075\uffc7" +
    "\076\uffc7\077\uffc7\107\uffc7\001\002\000\014\004\044\006" +
    "\077\007\102\021\075\026\076\001\002\000\004\053\uffc3" +
    "\001\002\000\036\004\034\043\025\045\036\052\033\055" +
    "\021\057\310\063\015\065\023\067\030\070\037\073\013" +
    "\075\031\076\014\077\035\001\002\000\062\004\uffc4\042" +
    "\uffc4\043\uffc4\045\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\054\uffc4\055\uffc4\057\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\067\uffc4\070\uffc4\071\uffc4\073\uffc4\074\uffc4\075\uffc4" +
    "\076\uffc4\077\uffc4\107\uffc4\001\002\000\062\004\uffc6\042" +
    "\uffc6\043\uffc6\045\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6" +
    "\054\uffc6\055\uffc6\057\uffc6\063\uffc6\064\uffc6\065\uffc6\066" +
    "\uffc6\067\uffc6\070\uffc6\071\uffc6\073\uffc6\074\uffc6\075\uffc6" +
    "\076\uffc6\077\uffc6\107\uffc6\001\002\000\010\036\134\037" +
    "\133\053\312\001\002\000\036\004\034\043\025\045\036" +
    "\052\033\055\021\063\015\064\314\065\023\067\030\070" +
    "\037\073\013\075\031\076\014\077\035\001\002\000\036" +
    "\004\034\043\025\045\036\052\033\055\021\063\015\064" +
    "\315\065\023\067\030\070\037\073\013\075\031\076\014" +
    "\077\035\001\002\000\062\004\uffc1\042\uffc1\043\uffc1\045" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\054\uffc1\055\uffc1" +
    "\057\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070" +
    "\uffc1\071\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1" +
    "\107\uffc1\001\002\000\062\004\uffc2\042\uffc2\043\uffc2\045" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\054\uffc2\055\uffc2" +
    "\057\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\071\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2" +
    "\107\uffc2\001\002\000\010\036\134\037\133\106\325\001" +
    "\002\000\004\106\324\001\002\000\004\106\323\001\002" +
    "\000\032\020\113\021\105\022\114\023\110\024\115\030" +
    "\116\031\112\032\107\033\106\034\104\035\111\106\322" +
    "\001\002\000\062\004\uffa6\042\uffa6\043\uffa6\045\uffa6\047" +
    "\uffa6\050\uffa6\051\uffa6\052\uffa6\054\uffa6\055\uffa6\057\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071" +
    "\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\107\uffa6" +
    "\001\002\000\062\004\uffa7\042\uffa7\043\uffa7\045\uffa7\047" +
    "\uffa7\050\uffa7\051\uffa7\052\uffa7\054\uffa7\055\uffa7\057\uffa7" +
    "\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071" +
    "\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\107\uffa7" +
    "\001\002\000\062\004\uffa4\042\uffa4\043\uffa4\045\uffa4\047" +
    "\uffa4\050\uffa4\051\uffa4\052\uffa4\054\uffa4\055\uffa4\057\uffa4" +
    "\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071" +
    "\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4\107\uffa4" +
    "\001\002\000\062\004\uffa5\042\uffa5\043\uffa5\045\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\054\uffa5\055\uffa5\057\uffa5" +
    "\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071" +
    "\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\107\uffa5" +
    "\001\002\000\014\005\057\006\060\007\055\013\054\016" +
    "\056\001\002\000\036\004\034\043\025\045\036\052\033" +
    "\055\021\063\015\065\023\067\030\070\037\072\331\073" +
    "\013\075\031\076\014\077\035\001\002\000\036\004\034" +
    "\043\025\045\036\052\033\055\021\063\015\065\023\067" +
    "\030\070\037\073\013\074\337\075\031\076\014\077\035" +
    "\001\002\000\004\026\332\001\002\000\004\004\044\001" +
    "\002\000\004\027\334\001\002\000\034\004\034\043\025" +
    "\045\036\052\033\055\021\063\015\065\023\067\030\070" +
    "\037\073\013\075\031\076\014\077\035\001\002\000\036" +
    "\004\034\043\025\045\036\052\033\055\021\063\015\065" +
    "\023\067\030\070\037\073\013\074\336\075\031\076\014" +
    "\077\035\001\002\000\062\004\uffae\042\uffae\043\uffae\045" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\uffae\054\uffae\055\uffae" +
    "\057\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070" +
    "\uffae\071\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077\uffae" +
    "\107\uffae\001\002\000\062\004\uffaf\042\uffaf\043\uffaf\045" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\054\uffaf\055\uffaf" +
    "\057\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070" +
    "\uffaf\071\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf" +
    "\107\uffaf\001\002\000\004\105\341\001\002\000\012\006" +
    "\077\007\102\021\075\026\076\001\002\000\016\020\113" +
    "\021\105\022\114\023\110\024\115\106\343\001\002\000" +
    "\062\004\uffe3\042\uffe3\043\uffe3\045\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\054\uffe3\055\uffe3\057\uffe3\063\uffe3\064" +
    "\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\073\uffe3" +
    "\074\uffe3\075\uffe3\076\uffe3\077\uffe3\107\uffe3\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\004\002\004\001\001\000\042\003\007\004" +
    "\021\005\023\007\026\010\011\013\017\016\015\022\041" +
    "\024\010\025\042\026\031\027\006\033\040\035\025\040" +
    "\016\041\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\067\005\023\007\026\010" +
    "\011\013\017\016\015\022\041\024\010\025\042\026\031" +
    "\027\006\033\040\035\025\040\016\041\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\325\001\001" +
    "\000\010\006\320\011\315\012\316\001\001\000\006\006" +
    "\102\011\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\266\001\001\000\002\001" +
    "\001\000\042\003\261\004\021\005\023\007\026\010\011" +
    "\013\017\016\015\022\041\024\010\025\042\026\031\027" +
    "\006\033\040\035\025\040\016\041\037\001\001\000\002" +
    "\001\001\000\004\010\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\230\011\225\012\226\001\001" +
    "\000\004\021\211\001\001\000\002\001\001\000\010\006" +
    "\172\017\173\021\174\001\001\000\002\001\001\000\010" +
    "\006\164\011\161\012\162\001\001\000\006\006\102\011" +
    "\073\001\001\000\004\021\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\045\004\021\005\023\007\026" +
    "\010\011\013\017\016\015\022\041\024\010\025\042\026" +
    "\031\027\006\033\040\035\025\040\016\041\037\001\001" +
    "\000\040\004\067\005\023\007\026\010\011\013\017\016" +
    "\015\022\041\024\010\025\042\026\031\027\006\033\040" +
    "\035\025\040\016\041\037\001\001\000\002\001\001\000" +
    "\006\021\051\030\050\001\001\000\002\001\001\000\004" +
    "\032\052\001\001\000\004\031\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\062\001" +
    "\001\000\004\032\063\001\001\000\004\031\064\001\001" +
    "\000\002\001\001\000\042\003\066\004\021\005\023\007" +
    "\026\010\011\013\017\016\015\022\041\024\010\025\042" +
    "\026\031\027\006\033\040\035\025\040\016\041\037\001" +
    "\001\000\040\004\067\005\023\007\026\010\011\013\017" +
    "\016\015\022\041\024\010\025\042\026\031\027\006\033" +
    "\040\035\025\040\016\041\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\140\001\001\000\004\006\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\102\011\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\130\001\001\000\004\006\127\001\001\000" +
    "\004\006\126\001\001\000\004\006\125\001\001\000\004" +
    "\006\124\001\001\000\004\006\123\001\001\000\004\006" +
    "\122\001\001\000\004\006\121\001\001\000\004\006\120" +
    "\001\001\000\004\006\117\001\001\000\004\006\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\102\011\135\001\001\000\006\006\102\011\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\142\004\021" +
    "\005\023\007\026\010\011\013\017\016\015\022\041\024" +
    "\010\025\042\026\031\027\006\033\040\035\025\040\016" +
    "\041\037\001\001\000\044\004\067\005\023\007\026\010" +
    "\011\013\017\014\146\015\147\016\015\022\041\024\010" +
    "\025\042\026\031\027\006\033\040\035\025\040\016\041" +
    "\037\001\001\000\002\001\001\000\042\003\160\004\021" +
    "\005\023\007\026\010\011\013\017\016\015\022\041\024" +
    "\010\025\042\026\031\027\006\033\040\035\025\040\016" +
    "\041\037\001\001\000\006\006\102\011\154\001\001\000" +
    "\004\015\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\156\004\021\005\023\007\026" +
    "\010\011\013\017\016\015\022\041\024\010\025\042\026" +
    "\031\027\006\033\040\035\025\040\016\041\037\001\001" +
    "\000\042\004\067\005\023\007\026\010\011\013\017\014" +
    "\157\016\015\022\041\024\010\025\042\026\031\027\006" +
    "\033\040\035\025\040\016\041\037\001\001\000\002\001" +
    "\001\000\040\004\067\005\023\007\026\010\011\013\017" +
    "\016\015\022\041\024\010\025\042\026\031\027\006\033" +
    "\040\035\025\040\016\041\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\177\001\001\000\010" +
    "\006\172\017\204\021\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\202\004\021\005\023\007\026" +
    "\010\011\013\017\016\015\022\041\024\010\025\042\026" +
    "\031\027\006\033\040\035\025\040\016\041\037\001\001" +
    "\000\040\004\067\005\023\007\026\010\011\013\017\016" +
    "\015\022\041\024\010\025\042\026\031\027\006\033\040" +
    "\035\025\040\016\041\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\207\004\021" +
    "\005\023\007\026\010\011\013\017\016\015\022\041\024" +
    "\010\025\042\026\031\027\006\033\040\035\025\040\016" +
    "\041\037\001\001\000\042\004\067\005\023\007\026\010" +
    "\011\013\017\016\015\020\210\022\041\024\010\025\042" +
    "\026\031\027\006\033\040\035\025\040\016\041\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\215" +
    "\036\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\216\001\001\000\002\001\001\000\004\021\220" +
    "\001\001\000\004\037\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\102\011\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\067\005\023\007\026\010\011\013\017" +
    "\016\015\022\041\024\010\025\042\026\031\027\006\033" +
    "\040\035\025\040\016\041\037\001\001\000\006\006\102" +
    "\011\263\001\001\000\002\001\001\000\006\006\102\011" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\172\017\271\021\174\001\001\000" +
    "\002\001\001\000\010\006\172\017\273\021\174\001\001" +
    "\000\004\023\276\001\001\000\042\003\305\004\021\005" +
    "\023\007\026\010\011\013\017\016\015\022\041\024\010" +
    "\025\042\026\031\027\006\033\040\035\025\040\016\041" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\300\004\021\005\023\007\026\010\011\013\017\016" +
    "\015\022\041\024\010\025\042\026\031\027\006\033\040" +
    "\035\025\040\016\041\037\001\001\000\040\004\067\005" +
    "\023\007\026\010\011\013\017\016\015\022\041\024\010" +
    "\025\042\026\031\027\006\033\040\035\025\040\016\041" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\172\017\304\021\174\001\001\000\002\001\001\000" +
    "\040\004\067\005\023\007\026\010\011\013\017\016\015" +
    "\022\041\024\010\025\042\026\031\027\006\033\040\035" +
    "\025\040\016\041\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\312\004\021\005" +
    "\023\007\026\010\011\013\017\016\015\022\041\024\010" +
    "\025\042\026\031\027\006\033\040\035\025\040\016\041" +
    "\037\001\001\000\040\004\067\005\023\007\026\010\011" +
    "\013\017\016\015\022\041\024\010\025\042\026\031\027" +
    "\006\033\040\035\025\040\016\041\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\326\001\001\000\042\003\327\004\021\005\023" +
    "\007\026\010\011\013\017\016\015\022\041\024\010\025" +
    "\042\026\031\027\006\033\040\035\025\040\016\041\037" +
    "\001\001\000\040\004\067\005\023\007\026\010\011\013" +
    "\017\016\015\022\041\024\010\025\042\026\031\027\006" +
    "\033\040\035\025\040\016\041\037\001\001\000\002\001" +
    "\001\000\006\021\051\030\332\001\001\000\002\001\001" +
    "\000\042\003\334\004\021\005\023\007\026\010\011\013" +
    "\017\016\015\022\041\024\010\025\042\026\031\027\006" +
    "\033\040\035\025\040\016\041\037\001\001\000\040\004" +
    "\067\005\023\007\026\010\011\013\017\016\015\022\041" +
    "\024\010\025\042\026\031\027\006\033\040\035\025\040" +
    "\016\041\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  

    public LinkedList<instruccion> arbol;

    public LinkedList<instruccion> getArbol(){
    return arbol;
    }


  public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
   

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PR_INICIO instrucciones PR_FIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaracion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= condicional_si 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= condicional_segun 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= ciclopara 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= ciclomientras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= ciclorepetirhasta 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= retorno 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= metodo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= funcion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= llamada 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= imprimir 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= imprimirnl 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion ::= PR_INGRESAR listaVariable PR_COMO PR_CAD PR_CONVALOR STRING S_PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("declaracion:CADENA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= PR_INGRESAR listaVariable PR_COMO PR_NUM PR_CONVALOR expresion_num S_PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("declaracion:NUMERICA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= PR_INGRESAR listaVariable PR_COMO PR_BOOL PR_CONVALOR expresion_logica S_PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("declaracion:LOGICA");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion ::= PR_INGRESAR listaVariable PR_COMO PR_CAR PR_CONVALOR expresion_char S_PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("declaracion:CARACTER");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_num ::= expresion_num PR_SUMA expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_num ::= expresion_num PR_RESTA expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_num ::= expresion_num PR_MULT expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_num ::= PR_RESTA expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_num ::= expresion_num PR_DIV expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_num ::= expresion_num PR_POT expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_num ::= PR_PARABRE expresion_num PR_PARCIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_num ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_num ::= DOUBLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_num",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignacion ::= listaVariable PR_RESTA S_MAYORQ expresion_num S_PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("declaracion:Asignacion");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listaVariable ::= listaVariable S_COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaVariable",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaVariable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaVariable",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_logica ::= PR_VERDADERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_logica ::= PR_FALSO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_logica ::= expresion_num PR_MAYOR expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_logica ::= expresion_num PR_MENOR expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_logica ::= expresion_num PR_MAYOROIGUAL expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_logica ::= expresion_num PR_MENOROIGUAL expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_logica ::= expresion_num PR_IGUAL expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_logica ::= expresion_num PR_DIFERENTE expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion_logica ::= expresion_logica PR_OR expresion_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion_logica ::= expresion_logica PR_AND expresion_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion_logica ::= PR_NOT expresion_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_char ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_char",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicional_si ::= PR_SI expresion_logica PR_ENTONCES instrucciones o_si de_lo_contrario PR_FINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		System.out.println("Trae ambos");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicional_si",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicional_si ::= PR_SI expresion_logica PR_ENTONCES instrucciones de_lo_contrario PR_FINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		System.out.println("de lo contrario");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicional_si",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicional_si ::= PR_SI expresion_logica PR_ENTONCES instrucciones o_si PR_FINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		System.out.println("o si ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicional_si",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicional_si ::= PR_SI expresion_logica PR_ENTONCES instrucciones PR_FINSI 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println("ninguno");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicional_si",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // o_si ::= PR_OSI expresion_logica PR_ENTONCES instrucciones o_si 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("o_si",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // o_si ::= PR_OSI expresion_logica PR_ENTONCES instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("o_si",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // de_lo_contrario ::= PR_DELOCONTRARIO instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("de_lo_contrario",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condicional_segun ::= PR_SEGUN valor PR_HACER opciones PR_DELOCONTRARIO PR_ENTONCES instrucciones PR_FINSEGUN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicional_segun",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // valor ::= variables 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // valor ::= expresion_num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variables ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variables",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // opciones ::= S_INTERROGACIONABRE valor S_INTERROGACIONCIERRA PR_ENTONCES instrucciones opciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // opciones ::= S_INTERROGACIONABRE valor S_INTERROGACIONCIERRA PR_ENTONCES instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("opciones",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ciclopara ::= PR_PARA variables PR_RESTA S_MAYORQ valor PR_HASTA valor incremental PR_HACER instrucciones PR_FINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclopara",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ciclopara ::= PR_PARA variables PR_RESTA S_MAYORQ valor PR_HASTA valor PR_HACER instrucciones PR_FINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclopara",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ciclopara ::= PR_PARA variables PR_RESTA S_MAYORQ valor PR_HASTA valor incremental PR_HACER PR_FINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclopara",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ciclopara ::= PR_PARA variables PR_RESTA S_MAYORQ valor PR_HASTA valor PR_HACER PR_FINPARA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclopara",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // incremental ::= PR_CON PR_INCREMENTAL valor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("incremental",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ciclomientras ::= PR_MIENTRAS expresion_logica PR_HACER instrucciones PR_FINMIENTRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclomientras",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ciclomientras ::= PR_MIENTRAS expresion_logica PR_HACER PR_FINMIENTRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclomientras",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ciclorepetirhasta ::= PR_REPETIR instrucciones PR_HASTAQUE expresion_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclorepetirhasta",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ciclorepetirhasta ::= PR_REPETIR PR_HASTAQUE expresion_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ciclorepetirhasta",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // retorno ::= PR_RETORNAR STRING S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Retorno String");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("retorno",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // retorno ::= PR_RETORNAR expresion_num S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Retorno numerico");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("retorno",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // retorno ::= PR_RETORNAR expresion_logica S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Retorno logico");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("retorno",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // retorno ::= PR_RETORNAR expresion_char S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Retorno Char");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("retorno",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // metodo ::= PR_METODO variables instrucciones PR_FINMETODO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // metodo ::= PR_METODO variables PR_CONPARAMETROS PR_PARABRE listaparametros PR_PARCIERRA instrucciones PR_FINMETODO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // listaparametros ::= variables tipodato listaparametros2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaparametros",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // listaparametros ::= variables tipodato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaparametros",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // listaparametros2 ::= S_COMA variables tipodato listaparametros2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaparametros2",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // listaparametros2 ::= S_COMA variables tipodato 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaparametros2",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipodato ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodato",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipodato ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodato",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipodato ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodato",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipodato ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodato",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipodato ::= PR_BOOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipodato",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // funcion ::= PR_FUNCION variables tipodato instrucciones PR_FINFUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // funcion ::= PR_FUNCION variables tipodato PR_CONPARAMETROS PR_PARABRE listaparametros PR_PARCIERRA instrucciones PR_FINFUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // llamada ::= PR_EJECUTAR variables PR_PARABRE PR_PARCIERRA S_PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		System.out.println("Hizo llamada");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // llamada ::= PR_EJECUTAR variables PR_PARABRE listaparametros3 PR_PARCIERRA S_PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		System.out.println("Hizo llamada");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // listaparametros3 ::= variables listaparametros4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaparametros3",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // listaparametros3 ::= variables 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaparametros3",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // listaparametros4 ::= S_COMA variables listaparametros4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaparametros4",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // listaparametros4 ::= S_COMA variables 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaparametros4",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // imprimir ::= PR_IMPRIMIR STRING S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Imprimio string ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // imprimir ::= PR_IMPRIMIR expresion_num S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("imprimio numerica");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // imprimir ::= PR_IMPRIMIR expresion_logica S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("imprimio logica ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // imprimir ::= PR_IMPRIMIR expresion_char S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("imprimio char");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // imprimirnl ::= PR_IMPRIMIRNL STRING S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Imprimionl string ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimirnl",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // imprimirnl ::= PR_IMPRIMIRNL expresion_num S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Imprimionl numero ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimirnl",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // imprimirnl ::= PR_IMPRIMIRNL expresion_logica S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Imprimionl logica ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimirnl",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // imprimirnl ::= PR_IMPRIMIRNL expresion_char S_PUNTOYCOMA 
            {
              Object RESULT =null;
		System.out.println("Imprimioln char ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimirnl",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
